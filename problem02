1)The greatest common divisor (GCD) of a and b is the largest number that divides both of them with no remainder. 
One way to find the GCD of two numbers is based on the observation that if r is the remainder when a is divided by b, 
then gcd(a, b) = gcd(b, r). As a base case, we can use gcd(a, 0) = a. Write a function called gcd that takes parameters 
a and b and returns their greatest common divisor.




def gcd(a,b):
    if b==0:
        return a
    else:
        return gcd(b, a%b)

"""a=int(input("Enter the 1st value : "))
b=int(input("Enter the 2nd value : "))
print(gcd(a,b))"""


print(gcd(int(input("Enter the 1st value : ")),int(input("Enter the 2nd value : "))))


2)A number, a, is a power of b if it is divisible by b and a/b is a power of b.
Write a function called is_power that takes parameters a and b and returns True if a is a power of b.
Note: you will have to think about the base case.





3)Observe the following function definitions. They Calculate the Factorial as per the Mathematical definition 
1! = 1 (n + 1)! = (n + 1) * n! Implement factI(n) as an Iterative Implementation & factR(n) as a Recursive Implementation

def factI(n):
	"""Assumes that n is an int > 0
	Returns n!
	Uses Iterative Implementation"""
	
def factR(n):
	"""Assumes that n is an int > 0
	Returns n!
	Uses Recursive Implementation"""



def factR(a):
    if a==0:
        return 1
    else:
        return a*factR(a-1)

print(factR(4))

---------------------------------------------or----------------------------


def factI(a):
    if a==0:
        return 1
    temp=a
    for i in range(1,a):
        if a>0:
            temp=temp*(a-1)
            a=a-1
    return temp
print(factI(4))


4)Write a program that computes the decimal equivalent of the binary number 10011?


5)Implement a function that meets the specification below. Use a try-except block.

def sumDigits(s):
	"""Assumes s is a string
	Returns the sum of the decimal digits in s
	For example, if s is 'a2b3c' it returns 5"""
	

def sumOfDigits(s):
    list1 = []
    try:
        for i in s:
            if i.isdigit():
                list1.append(int(i))
        print(sum(list1))

    except ValueError as ve:
        print("Invalid ")

s='a2b3c'
sumOfDigits(s)




6)Implement a function that satisfies the specification. Use a try-except block.

def findAnEven(l):
	"""Assumes l is a list of integers
	Returns the first even number in l
	Raises ValueError if l does not contain an even number"""


def findAnEven(list1):
    try:
        for i in list1:
            if i%2==0:
                print("The even numbers are ",i)
                exit()
        raise ValueError

    except ValueError as ve:
        print("Enter atleast one even ")

list1=[1,3,5,9]
findAnEven(list1)



7)A palindrome is a word that is spelled the same backward and forward, like "Malayalam" and "Noon" . 
Recursively, a word is a palindrome if the first and last letters are the same and the middle is a palindrome. 
Write a function called is_palindrome that takes a string argument and returns True if it is a palindrome and False otherwise. 
Remember that you can use the built-in function len to check the length of a string.
Use the function definition

def isPalindrome(s):
	"""Assumes s is a str
	Returns True if s is a palindrome; False otherwise.
	Punctuation marks, blanks, and capitalization are
	ignored."""


def isPalindrome(s):
    s1=s[::-1]
    if s==s1:
        print(s)
    else:
        print("not a palandrome")


s=str(input("Enter the string "))
isPalindrome(s)



------------------------------------or--------------------------------



def is_palindrome(s):
    if len(s)==1:
        print("palindrome")
    elif len(s) > 1:
        if s[0]==s[-1]:
            print('palindrome')
    else:
        print('not a palindrome')
s = input("enter the string: ")
is_palindrome(s)






